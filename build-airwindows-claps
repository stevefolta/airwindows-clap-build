#!/usr/bin/env sqs

airwindows-sources = nil

file-ext-re = Regex(r'^(?P<root>.*)\.(?P<ext>[[:alnum:]]+)$')

fn main
	only = []
	except = []
	which_arg = 1
	while which_arg < argv.size
		arg = argv[which_arg]
		which_arg += 1
		if arg == "only:"
			only.append(argv[which_arg])
			which_arg += 1
		else if arg == "except:"
			except.append(argv[which_arg])
			which_arg += 1

	read-settings("~/.config/build-airwindows-claps/settings")
	read-settings("settings")
	setup
	if !airwindows-sources
		fail('Configure "airwindows-sources" in your "settings" file.')
	airwindows-sources = Path(airwindows-sources).string
	for dir: glob("{airwindows-sources}/plugins/LinuxVST/src/*")
		if !Path(dir).is-dir
			continue
		name = Path(dir).basename
		if only.size > 0 && !only.contains(name)
			continue
		if except.contains(name)
			continue
		add-plugin(name)
	build-all


plugins = []

string-setting-re = Regex(r'[[:space:]]*(?P<name>[[:alnum:]-]+)[[:space:]]*=[[:space:]]*"(?P<value>[^"]*)"')

fn read-settings(path)
	path = Path(path)
	if !path.is-file
		return
	with file = File(path)
		for line: file.lines
			match = string-setting-re.match(line)
			if !match
				continue
			if match["name"] == "airwindows-sources"
				airwindows-sources = match["value"]

cxx = nil
c-flags = [ "-I." "-fPIC" "-Wno-multichar" "-Wfatal-errors" ]
num-cores = nil
compile-queue = CompileQueue()

fn setup
	$ mkdir -p sources build
	cxx = env["CXX"] || "c++"
	if !num-cores
		num-cores = Int($(nproc))

create-effect-instance-re = Regex(r'createEffectInstance\(')

cpp-template = r'/* NAME_CLAP.cpp */

#include "SRC_DIR/NAME.h"
#define createEffectInstance createEffectInstance_NAME
#include "SRC_DIR/NAME.cpp"

AudioEffectX* create_NAME() { return new NAME(nullptr); }
'

fn add-plugin(name)
	src-dir = Path("{airwindows-sources}/plugins/LinuxVST/src/{name}").string
	if !Path(src-dir).is-dir
		fail("Couldn't find source: {name}")

	# Make Plugin_CLAP.cpp.
	with file = File("sources/{name}_CLAP.cpp", "w")
		file.write(cpp-template.replace("SRC_DIR", src-dir).replace("NAME", name))

	plugins.append(name)

fn build-all
	object-files = []
	fn compile(c-source, extra-c-flags)
		our-c-flags = c-flags
		if extra-c-flags
			our-c-flags += extra-c-flags
		name = file-ext-re.match(Path(c-source).basename)['root']
		object-file = "build/{name}.o"
		# print("Compiling {name}.cpp...")
		# $ {cxx} -c {c-source} {our-c-flags} -o {object-file} || {fail()}
		compile-queue.append([ cxx "-c" c-source ] + our-c-flags + [ "-o" object-file ], "Compiling {name}.cpp...")
		object-files.append(object-file)

	# The framework.
	for name: [ "AudioEffectX" "AirwindowsCLAP" ]
		compile("{name}.cpp")

	# The plugins.
	src-dir = Path("{airwindows-sources}/plugins/LinuxVST/src").string
	for name: plugins
		# PluginProc.cpp.
		compile("{src-dir}/{name}/{name}Proc.cpp", [ "-I{src-dir}/{name}" ])
		# Plugin_CLAP.cpp.
		compile("sources/{name}_CLAP.cpp")

	# The vector of plugins.
	with file = File("sources/Plugins_vector.cpp", "w")
		file.write('#include "AirwindowsCLAP.h"\n')
		file.write('\n')
		for name: plugins
			file.write('extern AudioEffectX* create_{name}();\n')
		file.write('\n')
		file.write('std::vector<PluginEntry> plugins = {{\n')
		for name: plugins
			file.write('\t{{ .create = create_{name}, }},\n')
		file.write('\t}};\n')
		file.write('\n')
	# Compile it.
	compile("sources/Plugins_vector.cpp")

	compile-queue.run-all()

	print("Linking...")
	$ {cxx} {object-files} -shared -o "Airwindows.clap"

class CompileQueue
	(pending running)

	class Entry
		(command message)
		init(command-in, message-in)
			command = command-in
			message = message-in
	
	init
		pending = []
		running = []
	append(command, message)
		pending.append(Entry(command, message))
	run-all
		# Start initial commands.
		while pending.size > 0 && running.size < num-cores
			entry = pending.pop-front
			if entry.message
				print(entry.message)
			process = run(entry.command, { wait: false })
			running.append(process)

		# Keep it going.
		while true
			all-done = true
			i = 0
			while i < running.size
				process = running[i]
				if process
					if process.is-done
						if !process.ok
							fail()
						# Start a new one.
						if pending.size > 0
							entry = pending.pop-front
							if entry.message
								print(entry.message)
							running[i] = run(entry.command, { wait: false })
							all-done = false
					else
						all-done = false
				i += 1
			if all-done
				break
			# We ought to sleep a little here, and not just spin consuming CPU, but
			# sqs won't let us sleep for less then a second, and that's too long to
			# wait.
			# sleep(1)

main()


